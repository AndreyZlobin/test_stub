/* removeCode */
/* eslint-disable no-control-regex */
/* eslint-disable no-console */
// eslint-disable-next-line @typescript-eslint/no-var-requires
const { execSync } = require('child_process');

const PACKAGE_JSON_PATH = './package.json';

const AUTH_PATHS = [
    './config/default.ts',
    './src/redux/modules/app.ts',
    './src/types/services.ts',
    './src/server/plugins/page-plugin.tsx',
    './src/server/plugins/plugins.ts',
    './src/server/lib/prepare-state.ts',
];

const PATHS_TO_EXAMPLES = [
    './src/examples',
    './src/redux/modules/counter.ts',
    './src/redux/modules/routing.ts',
    './src/redux/services/example.ts',
    './src/pages/secret-page',
    './src/types/api/example-api.ts',
    './cypress/integration/examples',
    './cypress/snapshots',
    './src/server/mocks/example-api',
    './template/README.hbs',
    './CONTRIBUTING.md',
    './CHANGELOG.md',
];

const TRANSFORM_CODE_PATHS = [
    './src/routes.tsx',
    './src/redux/root-reducer.ts',
    './src/server/mocks/mocks.ts',
    './src/pages/welcome-page/welcome-page.tsx',
    './src/types/declarations/client-api-fetcher.d.ts',
    './src/pages/welcome-page/welcome-page.module.css',
    './src/utils/alfa-metrics.ts',
    './plopfile.js',
];

const REPLACEMENT_FILES = [
    PACKAGE_JSON_PATH,
    './config/default.ts',
    './src/pages/welcome-page/welcome-page.tsx',
    './sonar-project.properties',
];

const filePatterns = {
    remove: /\/\*\s?removeCode\s?\*\/([\s\S]*?)\/\*\s?endRemoveCode\s?\*\//gm,
    replace: /\/\*\s?replaceCode([\s\S]*?)\*\/([\s\S]*?)\/\*\s?endReplaceCode\s?\*\//gm,
};

const trasformGenerator =
    (pattern = 'replace') =>
    (file) => ({
        type: 'modify',
        path: file,
        transform: (oldFile) => {
            const match = oldFile.matchAll(filePatterns[pattern]);
            const tokens = Array.from(match);

            let newFileContent = oldFile;

            tokens.forEach(([oldValue, newValue]) => {
                newFileContent = newFileContent.replace(oldValue, newValue);
            });

            return newFileContent;
        },
    });

const removeGenerator =
    (pattern = 'remove') =>
    (file) => ({
        type: 'modify',
        path: file,
        pattern: filePatterns[pattern],
        template: '',
    });

const createCodeRemoveActions = () => {
    const actions = TRANSFORM_CODE_PATHS.map(removeGenerator());

    return actions;
};

const createCodeReplaceActions = () => {
    const actions = TRANSFORM_CODE_PATHS.map(trasformGenerator());

    return actions;
};

const createModifyActions = (pattern, template) => {
    const actions = REPLACEMENT_FILES.map((file) => ({
        type: 'modify',
        path: file,
        pattern: new RegExp(pattern, 'g'),
        template,
    }));

    return actions;
};

const addAuth = (auth) => {
    if (!auth) return AUTH_PATHS.map(removeGenerator('replace'));
    console.log('–î–æ–±–∞–≤–ª—è—é adAuthPlugin. ‚è≥‚Äç');
    execSync('yarn add @alfa-bank/ufr-hapi-ad-auth-plugin');

    return [
        ...AUTH_PATHS.map(trasformGenerator()),
        {
            type: 'add',
            path: './src/server/lib/get-valid-credentials.ts',
            force: true,
            templateFile: 'template/get-valid-credentials.hbs',
        },
        {
            type: 'add',
            path: './src/types/api/ad.ts',
            force: true,
            templateFile: 'template/ad.hbs',
        },
    ];
};
/* endRemoveCode */

module.exports = (plop) => {
    const validateComponentName = (value) => {
        if (!value) return '–ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
        if (!/^([a-z]+-?)+$/.test(value)) return '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞';

        return true;
    };
    /* removeCode */
    const validate = (value) => {
        if (value) return true;

        return '–ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
    };

    plop.setActionType('removeStubFiles', () => {
        console.log('–ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞–±–∞ üßû‚Äç');

        PATHS_TO_EXAMPLES.forEach((file) => {
            execSync(`rm -rf ${file}`);
        });
    });

    plop.setActionType('prepareProject', ({ repositoryName, auth }) => {
        console.log('–£–¥–∞–ª—è—é –ª–∏—à–Ω–∏–π –∫–æ–¥. –≠—Ç–æ –∑–∞–π–º–µ—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç. ‚è≥');

        execSync('yarn');
        execSync('yarn format');
        execSync('yarn lint:fix');
        execSync('yarn remove date-fns');

        console.log('#######################################');
        console.log(
            `\n–£—Ä–∞! –ì–æ—Ç–æ–≤–æ üéâ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ${repositoryName} –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! ‚ú®\n ${
                auth && '–ù–µ –∑–∞–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–∫–∏ üë©üèº‚Äçüíª\n'
            }`,
        );
    });

    plop.setActionType('printInstruction', () => {
        console.log('---------------------------------------\n');
        console.log('–ß—Ç–æ –¥–∞–ª—å—à–µ? ü§î');
        console.log('1. –ü–æ–º–µ–Ω—è—Ç—å –≤–µ—Ä—Å–∏—é –≤ package.json –Ω–∞ 1.0.0');
        console.log('2. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞: git add --all');
        console.log(
            '3. –ó–∞–º–µ–Ω–∏—Ç—å –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ê–ª—å—Ñ–∞-–ü–ª–∞—Ç—Ñ–æ—Ä–º–æ–π: git commit --amend -m "feat(*): init project"',
        );
        console.log('4. –ó–∞–ø—É—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–µ—Ç–∫—É: git push -f origin template');
        console.log('---------------------------------------\n');
    });

    console.log('–ü—Ä–∏–≤–µ—Ç!üëã –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç. –î–∞–≤–∞–π –∂–µ —Å–∫–æ—Ä–µ–µ –Ω–∞—á–Ω–µ–º! üöÄ');

    plop.setGenerator('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', {
        description: '',
        prompts: [
            {
                type: 'input',
                name: 'projectDescription',
                message: '1/7 –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞. –ö –ø—Ä–∏–º–µ—Ä—É, "–°—Ç–∞–± –ï–¥–∏–Ω–æ–≥–æ –§—Ä–æ–Ω—Ç–∞"',
                validate,
            },
            {
                type: 'input',
                name: 'projectName',
                message: '2/7 –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –≥–∏—Ç–µ. –£ —Å—Ç–∞–±–∞, –∫ –ø—Ä–∏–º–µ—Ä—É, —ç—Ç–æ ufr-sandbox',
                validate,
            },
            {
                type: 'input',
                name: 'repositoryName',
                message: '3/7 –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –ö –ø—Ä–∏–º–µ—Ä—É, ufr-sandbox-example-ui',
                validate,
            },
            {
                type: 'input',
                name: 'jiraLink',
                message:
                    '4/7 –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∂–∏—Ä–µ. –ö –ø—Ä–∏–º–µ—Ä—É, https://jira.moscow.alfaintra.net/projects/UFRSBXUI',
                validate,
            },
            {
                type: 'input',
                name: 'confluenceLink',
                message: '5/7 –ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏... –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç –≤ confluence',
                validate,
            },
            {
                type: 'input',
                name: 'jenkinsLink',
                message: '6/7 –°—Å—ã–ª–∫–∞ –Ω–∞ jenkins. –ö –ø—Ä–∏–º–µ—Ä—É, https://dojenkins/ufrsandbox/',
                validate,
            },
            {
                type: 'confirm',
                name: 'auth',
                message: '7/7 –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ ad-api?',
            },
        ],
        actions: ({ projectName, repositoryName, projectDescription, auth }) => {
            const removeStubCodeActions = createCodeRemoveActions();
            const replaceCodeActions = createCodeReplaceActions();
            const updateRepositoryNameActions = createModifyActions(
                'ufr-sandbox-example-ui',
                repositoryName,
            );
            const updateProjectNameActions = createModifyActions('ufr-sandbox', projectName);
            const updateRepositoryDescriptionActions = createModifyActions(
                '–°—Ç–∞–± –ï–¥–∏–Ω–æ–≥–æ –§—Ä–æ–Ω—Ç–∞',
                projectDescription,
            );

            console.log('–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø—É—Å–∫–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É üöÄ');

            return [
                ...addAuth(auth),
                ...removeStubCodeActions,
                ...replaceCodeActions,
                ...updateRepositoryNameActions,
                ...updateProjectNameActions,
                ...updateRepositoryDescriptionActions,
                {
                    type: 'add',
                    path: './README.md',
                    force: true,
                    templateFile: 'template/README.hbs',
                },
                {
                    type: 'removeStubFiles',
                },
                {
                    type: 'prepareProject',
                },
                {
                    type: 'printInstruction',
                },
            ];
        },
    });
    /* endRemoveCode */
    plop.setGenerator('–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞', {
        description: '',
        prompts: [
            {
                type: 'input',
                name: 'name',
                message: '–ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, my-lovely-component)',
                validateComponentName,
            },
        ],
        actions: [
            {
                type: 'add',
                path: 'src/components/{{name}}/index.ts',
                templateFile: 'template/index.hbs',
            },
            {
                type: 'add',
                path: 'src/components/{{name}}/{{name}}.tsx',
                templateFile: 'template/component.hbs',
            },
            {
                type: 'add',
                path: 'src/components/{{name}}/{{name}}.module.css',
                templateFile: 'template/css.module.hbs',
            },
        ],
    });
};
